
import * as PIXI            from 'pixi.js'
import * as PIXIP           from 'pixi-projection'
import React, { Component } from 'react'


import Line                 from '2d/line/web/Line'
import Point                from '2d/point/web/Point'
import Context              from '2d/stage/all/Context'
import createDebugger       from 'core/debug/api/create'


const debug = createDebugger(`2d:ruler:web:Ruler`)

class Ruler extends Component {
  constructor() {
    super()

    this.state = {
      x1: 0,
      y1: 0,
      
      x2: 0,
      y2: 0,

      isClicked: false,
    }
  }

  componentDidMount() {
    this.mount()
  }

  componentWillUnmount() {
    this.unmount()
  }

  process = () => {
    const { context } = this.props

    const {
      x: x2,
      y: y2,
    } = context.app.renderer.plugins.interaction.mouse.global

    if (this.state.x2 !== x2 || this.state.y2 !== y2) {
      this.setState({ x2, y2 })

      const { onChange } = this.props

      if (this.state.isClicked && onChange) {
        const length = this.getLength(x2, y2)

        onChange({ length })
      }
    }
  }

  mount = (payload) => {
    const { context } = this.props

    context.app.ticker.add(this.process)
  }

  unmount = () => {
    const { context } = this.props

    context.app.ticker && context.app.ticker.remove(this.process)
  }

  getLength = (x2, y2) => {
    const { x1, y1 } = this.state

    return Math.sqrt(
      Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)
    )
  }

  onClick = ({ x: x1, y: y1 }) => {
    const { onFinish } = this.props
    
    if (this.state.isClicked) {
      const length = this.getLength(x1, y1)

      return onFinish && onFinish({ length })
    }

    this.setState({ x1, y1, isClicked: true, })
  }

  render() {
    debug(`render()`)

    const { x1, y1 } = this.state
    const { x2, y2 } = this.state
    const { isClicked } = this.state

    return (
      <React.Fragment>
        <Point
          x={ x2 }
          y={ y2 }
          
          onClick={ this.onClick }
        />
        {
          isClicked && <Point
            x={ x1 }
            y={ y1 }
          />
        }
        {
          isClicked && <Line
            path={[
              [x1, y1],
              [x2, y2],
            ]}
          />
        }        
      </React.Fragment>
    )
  }
}

export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Ruler {...props} context={ context } />
      )}
    </Context.Consumer>
  )
}