import * as PIXI            from 'pixi.js'
import React, { Component } from 'react'
import styled               from 'styled-components'


import Context              from '2d/stage/all/Context'
import Provider             from '2d/stage/all/Provider'
import createDebugger       from 'core/debug/api/create'


const debug = createDebugger(`2d:stage:web:Stage`)

class Stage extends Component {
  static defaultProps = {
    antialias: true,
    width: 800,
    height: 600,
  }

  constructor() {
    super()

    this.state = {
      isReady: false,
    }
  }

  componentDidMount() {
    const { context } = this.props
    const { antialias, width, height, options } = this.props

    this.app = new PIXI.Application(width, height, {
      ...options,

      antialias,
      backgroundColor: 0xffffff, // this.app.renderer.backgroundColor
      view: this.canvas,
    })

    context.set({ app: this.app })

    this.setState({ isReady: true })
  }

  componentDidCatch(error, errorInfo) {
    debug(`componentDidCatch()`, `error`, error, `errorInfo`, errorInfo)
  }

  componentWillUnmount() {
    this.renderStage()
    this.app.destroy()
  }

  renderStage() {
    this.app.renderer.render(this.app.stage)
  }

  render() {
    return (
      <React.Fragment>
        <canvas
          ref={(canvas) => this.canvas = canvas}

          style={{ border: '1px solid black' }}
        />
        { this.state.isReady && this.props.children }
      </React.Fragment>
    )
  }
}

export default (props) => {
  return (
    <Provider>
      <Context.Consumer>
        {(context) => (
          <Stage {...props} context={ context } />
        )}
      </Context.Consumer>
    </Provider>
  )
}