import * as PIXI            from 'pixi.js'
import * as PIXIP           from 'pixi-projection'
import React, { Component } from 'react'


import Line                 from '2d/line/web/Line'
import Point                from '2d/point/web/Point'
import Context              from '2d/stage/all/Context'
import createDebugger       from 'core/debug/api/create'


const debug = createDebugger(`2d:lineTool:web:LineToolManager`)

class LineToolManager extends Component {
  mount = (payload) => {
    const { context } = this.props
  }

  unmount = () => {
    const { context } = this.props
  }

  onDragMove = ({ index, x, y }) => {
    const { onChange } = this.props
    const { path } = this.props

    onChange && onChange({
      path: [
        ...path.slice(0, index),
        [x, y],
        ...path.slice(index + 1),
      ]
    })
  }

  renderPoint = ({ coordList, index }) => {
    return (
      <Point
        key={`point_${ index }`}
        x={ coordList[0] }
        y={ coordList[1] }
        color={ 0xff0000 }

        onDragMove={({ x, y }) => this.onDragMove({ index, x, y }) }
      />
    )
  }

  render() {
    debug(`render()`)

    const { path } = this.props

    return (
      <React.Fragment>
        <Line
          path={[
            ...path,
            path[0]
          ]}
          color={ 0xee0000 }
        />
        {
          path.map((coordList, index) =>
            this.renderPoint({ coordList, index }))
        }
      </React.Fragment>
    )
  }
}

export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <LineToolManager {...props} context={ context } />
      )}
    </Context.Consumer>
  )
}
