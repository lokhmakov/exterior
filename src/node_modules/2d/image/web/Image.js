import cJSON                from 'circular-json'

import * as PIXI            from 'pixi.js'
import * as PIXIP           from 'pixi-projection'
import React, { Component } from 'react'


import Context              from '2d/stage/all/Context'
import createDebugger       from 'core/debug/api/create'


const debug = createDebugger(`2d:image:web:Image`)

class Image extends Component {
  componentDidMount() {
    const { imageLink } = this.props
    const { context } = this.props
    const { stage } = context.app

    this.stage = stage

    if (!PIXI.TextureCache[imageLink]) {
      PIXI.loader
        .add(imageLink, imageLink)
        .load(this.mount)
    } else {
      this.mount()
    }
  }

  componentWillUnmount() {
    this.unmount()
  }

  mount = (payload) => {
    this.instance = new PIXI.Container()

    this.update(this.props)

    this.stage.addChild(this.instance)
  }

  unmount = () => {
    this.stage.removeChild(this.instance)
  }

  imageAdd = async (props) => {
    const { imageLink } = props
    const { width } = props

    const texture = PIXI.TextureCache[imageLink]

    //debug(`imageAdd`, `width`, cJSON.stringify(texture.baseTexture))

    const scale = width / texture.orig.width

    const sprite = this.mesh = new PIXI.projection.Sprite2d(texture)

    sprite.scale.set(scale, scale)

    this.instance.addChild(sprite)
  }

  update = (props) => {
    const { context } = props
    const { renderer } = context.app

    const { screen } = renderer
    const { width, height } = screen

    const { x, y } = props
    const instance = this.instance

    this.imageAdd(props)
  }

  onClick = (payload) => {
    const { context } = this.props
    const { onClick } = this.props

    const {
      data: {
        global: {
          x, y,
        }
      }
    } = payload

    onClick && onClick({ x, y })
  }

  render() {
    return null
  }
}

export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Image {...props} context={ context } />
      )}
    </Context.Consumer>
  )
}