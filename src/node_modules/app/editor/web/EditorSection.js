import React, { Component } from 'react'

import uuid                 from 'uuid/v4'


import Image                from '2d/image/web/Image'
import LineTool             from '2d/lineTool/web/LineTool'
import Ruler                from '2d/ruler/web/Ruler'
import Stage                from '2d/stage/web/Stage'

import groupCreate          from 'app/group/api/local/create'

import modeMap              from 'app/project/api/modeMap'
import projectQuery         from 'app/project/api/local/query'
import projectUpdate        from 'app/project/api/local/update'

import Mutation             from 'core/mutation/web/Mutation'
import Query                from 'core/query/web/Query'

import Block                from 'layout/web/Block'

import createDebugger       from 'core/debug/api/create'


const debug = createDebugger(`app:editor:web:EditorSection`)

const random = (min, max) => Math.round(min - 0.5 + Math.random() * (max - min + 1))

class EditorSection extends Component {
  renderGroupAdd = ({ doc, productMutate }) => {
    return (
      <Mutation
        name='groupCreate'
        entity='group'

        mutation={ groupCreate }
      >
        {({ mutate }) => (
          <LineTool
            onFinish={
              (({ path }) => {
                productMutate({ ...doc, mode: modeMap.DEFAULT, })
                mutate({ id: uuid(), name: `group${ random(0, 1000) }`, path })
              })
            }
          />
        )}
      </Mutation>
    )
  }

  renderScaleMeasure = ({ doc, productMutate }) => {
    return (
      <Ruler
        onChange={({ length }) => console.log(`LENGTH`, length)}
        onFinish={({ length: unit }) => productMutate({
          ...doc,
          unit,
          mode: modeMap.DEFAULT,
        })}
      />
    )
  }

  renderProjectQuery = ({ data, order }) => {
    const { id } = this.props

    if (!data[id]) return null

    const doc = data[id]
    const { imageLink } = doc
    const { mode } = doc

    //debug(`renderProjectQuery`, imageLink)

    return (
      <Mutation
        name='projectUpdate'
        entity='project'

        mutation={ projectUpdate }
      >
        {({ mutate }) => (
          <React.Fragment>
            <Image
              imageLink={ imageLink }
              width={ 800 }
            />
            { mode === modeMap.SCALE_MEASURE && this.renderScaleMeasure({ doc, productMutate: mutate }) }
            { mode === modeMap.GROUP_ADD && this.renderGroupAdd({ doc, productMutate: mutate }) }
          </React.Fragment>
        )}
      </Mutation>
    )
  }

  render() {
    return (
      <Block style={{ height: 600 }} center middle>
        <Stage>
          <Query
            name='projectQuery'
            entity='project'

            query={ projectQuery }
          >
            { this.renderProjectQuery }
          </Query>
        </Stage>
      </Block>
    )
  }
}

export default EditorSection