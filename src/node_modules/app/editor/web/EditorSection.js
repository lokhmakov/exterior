import React, { Component } from 'react'

import uuid                 from 'uuid/v4'


import Image                from '2d/image/web/Image'
import LineTool             from '2d/lineTool/web/LineTool'
import LineToolManager      from '2d/lineTool/web/LineToolManager'
import Ruler                from '2d/ruler/web/Ruler'
import Stage                from '2d/stage/web/Stage'

import groupCreate          from 'app/group/api/local/create'
import groupQuery           from 'app/group/api/local/query'
import Group2d              from 'app/group/web/Group2d'

import modeMap              from 'app/project/api/modeMap'
import projectQuery         from 'app/project/api/local/query'
import projectUpdate        from 'app/project/api/local/update'

import Mutation             from 'core/mutation/web/Mutation'
import Query                from 'core/query/web/Query'

import Block                from 'layout/web/Block'

import createDebugger       from 'core/debug/api/create'


const debug = createDebugger(`app:editor:web:EditorSection`)

const random = (min, max) => Math.round(min - 0.5 + Math.random() * (max - min + 1))

const processPerspective = ({ path }) => {
  const corner1 = [...path[0]]
  const corner2 = [...path[0]]

  let first = false

  for (let coord of path) {
    if (first) {
      first = true
      continue
    }

    if (corner1[0] > coord[0]) {
      corner1[0] = coord[0]
    }
    if (corner1[1] > coord[1]) {
      corner1[1] = coord[1]
    }
    if (corner2[0] < coord[0]) {
      corner2[0] = coord[0]
    }
    if (corner2[1] < coord[1]) {
      corner2[1] = coord[1]
    }
  }

  const [x1, y1] = corner1
  const [x2, y2] = corner2

  return [
    [x1, y1],
    [x2, y1],
    [x2, y2],
    [x1, y2],
  ]
}

class EditorSection extends Component {
  renderGroupAdd = ({ doc, productMutate }) => {
    return (
      <Mutation
        name='groupCreate'
        entity='group'

        mutation={ groupCreate }
      >
        {({ mutate }) => (
          <LineTool
            onFinish={
              (({ path }) => {
                productMutate({ ...doc, mode: modeMap.DEFAULT, })
                mutate({
                  id: uuid(),
                  name: `group${ random(0, 1000) }`,
                  path,
                  perspectivePath: processPerspective({ path })
                })
              })
            }
          />
        )}
      </Mutation>
    )
  }

  renderScaleMeasure = ({ doc, productMutate }) => {
    return (
      <Ruler
        //onChange={({ length }) => console.log(`LENGTH`, length)}
        onFinish={({ length: unit }) => productMutate({
          ...doc,
          unit,
          mode: modeMap.DEFAULT,
        })}
      />
    )
  }

  renderGroupPerspective = ({ doc, projectDoc, productMutate }) => {
    // console.log(`renderGroupPerspective`, doc)

    return (
      <Mutation
        name='groupCreate'
        entity='group'

        mutation={ groupCreate }
      >
        {({ mutate }) => (
          <LineToolManager
            path={ doc.perspectivePath }

            onChange={({ path }) => {
              mutate({
                ...doc,
                perspectivePath: path,
              })
            }}
          />
        )}
      </Mutation>
    )
  }

  renderGroupManage = ({ doc, projectDoc, productMutate }) => {
    // console.log(`renderGroupPerspective`, doc)

    return (
      <Mutation
        name='groupCreate'
        entity='group'

        mutation={ groupCreate }
      >
        {({ mutate }) => (
          <LineToolManager
            path={ doc.path }

            onChange={({ path }) => {
              mutate({
                ...doc,
                path,
              })
            }}
          />
        )}
      </Mutation>
    )
  }

  renderGroupQuery = (projectDoc, productMutate) => ({ data, order }) => {
    return order.map((id) => {
      const { mode } = projectDoc

      const doc = data[id]

      return (
        <React.Fragment>
          <Group2d
            key={ id }
            {...doc}
          />
          {
            mode === modeMap.GROUP_PERSPECTIVE
            && doc.id === projectDoc.groupId
            && this.renderGroupPerspective({ doc, projectDoc, productMutate })
          }
          {
            mode === modeMap.GROUP_MANAGE
            && doc.id === projectDoc.groupId
            && this.renderGroupManage({ doc, projectDoc, productMutate })
          }
        </React.Fragment>
      )
    })
  }

  renderProjectQuery = ({ data, order }) => {
    const { id } = this.props

    if (!data[id]) return null

    const doc = data[id]
    const { imageLink } = doc
    const { mode } = doc

    return (
      <Mutation
        name='projectUpdate'
        entity='project'

        mutation={ projectUpdate }
      >
        {({ mutate }) => (
          <React.Fragment>
            <Image
              imageLink={ imageLink }
              width={ 800 }
            />
            { mode === modeMap.SCALE_MEASURE && this.renderScaleMeasure({ doc, productMutate: mutate }) }
            { mode === modeMap.GROUP_ADD && this.renderGroupAdd({ doc, productMutate: mutate }) }

            <Query
              name='groupQuery'
              entity='group'

              query={ groupQuery }
            >
              { this.renderGroupQuery(doc, mutate) }
            </Query>
            
          </React.Fragment>
        )}
      </Mutation>
    )
  }

  render() {
    return (
      <Block style={{ height: 600 }} center middle>
        <Stage>
          <Query
            name='projectQuery'
            entity='project'

            query={ projectQuery }
          >
            { this.renderProjectQuery }
          </Query>
        </Stage>
      </Block>
    )
  }
}

export default EditorSection