import _update              from 'immutability-helper'

import { takeEvery }        from 'redux-saga/effects'
import { put }              from 'redux-saga/effects'
import { select }           from 'redux-saga/effects'

import uuid                 from 'uuid/v4'


const createNs = (ns, entity) => {
  return {
    $merge: {
      [ns] : {
        [entity]: {
          data: {},
          order: [],
        },
      },
    },
  }
}

const createEntity = (ns, entity) => {
  return {
    [ns] : {
      $merge: {
        [entity]: {
          data: {},
          order: [],
        },
      },
    },
  }
}

export default ({ name, processName = `CREATE` }) => {
  const processNameDone = `${ processName }_DONE`

  const types = {
    [processName]:      `${ name }/${ processName }`,
    [processNameDone]:  `${ name }/${ processNameDone }`,
  }

  const reducerMap = {
    [types[processNameDone]]: (state, { payload, options }) => {
      const { 
        ns = `default`,
        entity = `default`,
      } = options || {}

      let next

      if (!state[ns]) {
        next = _update(state, createNs(ns, entity))
      } else if (!state[ns][entity]) {
        next = _update(state, createEntity(ns, entity))
      } else {
        next = state
      }

      return _update(next, {
        [ns]: {
          [entity]: {
            data: {
              $merge: { [payload.id]: payload },
            },
            order: {
              $push: [payload.id],
            },
          },
        }
      })
    }
  }

  function* processCreate({ payload, options }) {
    try {
      const { id = uuid(), project } = payload

      yield put({
        type: types[processNameDone],
        payload: { ...payload, id },
        options,
      })
    } catch (error) {
      console.log(error)
    }
  }

  function* saga() {
    yield takeEvery(types[processName], processCreate)
  }

  return {
    reducerMap,
    saga,
    types,
  }
}
