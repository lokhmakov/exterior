import React, { Component } from 'react'

import { Provider as RProvider } from 'react-redux'


import createStore          from 'evokeme/space/api/createStore'

import Context              from 'evokeme/space/all/Context'


const who = [`evokeme`, `space`, `all`, `Provider`]

class SpaceProvider extends Component {
  constructor() {
    super()

    this.state = {
      isReady: false,
    }
  }
  
  componentDidMount = async () => {
    await this.createStore()

    this.setState({ isReady: true })
  }

  createStore = async () => {
    this.store = createStore()
  }

  item = {
    create: (payload, options) => {
      const { id, ...props } = payload
      const { ns = `default`, entity = `default`, } = options || {}
      const { dispatch } = this.store

      // console.log(...who, `item`, `create()`, payload, options)

      dispatch({
        type: `item/CREATE`,
        payload: {
          id,
          ...props,
        },
        options,
      })
    },

    update: (payload, options) => {
      const { id, ...props } = payload
      const { ns = `default`, entity = `default`, } = options || {}
      const { dispatch } = this.store

      // console.log(...who, `item`, `update()`, payload, options)

      dispatch({
        type: `item/UPDATE`,
        payload: {
          id,
          ...props,
        },
        options,
      })    
    },

    remove: (payload, options) => {
      const { id } = payload
      const { ns = `default`, entity = `default`, } = options || {}
      const { dispatch } = this.store

      // console.log(...who, `item`, `remove()`, payload, options)

      dispatch({
        type: `item/REMOVE`,
        payload: {
          id,
        },
        options,
      })       
    },
  }

  render() {
    const value = {
      item: this.item,
    }

    if (this.store) {
      return (
        <RProvider store={ this.store }>
          <Context.Provider value={ value }>
            { this.props.children }
          </Context.Provider>
        </RProvider>
      )
    }

    return null
  }
}

export default SpaceProvider