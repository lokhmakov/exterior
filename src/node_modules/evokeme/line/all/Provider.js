import React, { Component } from 'react'


import Context              from 'evokeme/line/all/Context'


const who = [`evokeme`, `line`, `all`, `Provider`]

class Provider extends Component {
  constructor() {
    super()

    this.state = {
      data: {},
      order: [],

      lineToPoint: {},
    }
  }

  line = {
    create: ({ id, name, layer }) => {
      const { data: { name: isExist } } = this.state

      if (!isExist) {
        this.setState(({ data, order }) => {
          return {
            data: {
              ...data,
              [id]: { id, name, layer },
            },
            order: [
              ...order,
              id
            ],
          }
        })
      }
    },

    update: ({ id, name, layer }) => {
      this.setState(({ data }) => {
        return {
          data: {
            ...data,
            [id]: { id, name, layer },
          }
        }
      })
    },

    remove: ({ id }) => {
      this.setState(({ data, order }) => {
        const { [id]: doc, ...all } = data

        return {
          data,
          order: order.filter((current) => current != id),
        }
      })
    },

    addPoint: ({ lineId, pointId }) => {
      this.setState(({ lineToPoint }) => {
        return {
          lineToPoint: [
            ...(lineToPoint[lineId] || []),
            pointId,
          ]
        }
      })
    },

    selectById: ({ id }) => {
      return {
        ...this.state.data[id],
        lineToPoint: this.state.lineToPoint[id],
      }
    },
  }

  render() {
    return (
      <Context.Provider value={{
        action: {
          point: this.point,
        },

        ...this.state,
      }}>
        { this.props.children }
      </Context.Provider>
    )
  }
}

export default Provider