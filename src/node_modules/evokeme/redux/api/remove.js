import _update              from 'immutability-helper'

import { takeEvery }        from 'redux-saga/effects'
import { put }              from 'redux-saga/effects'


_update.extend('$exclude', (excludeList, list) => {
  return list.filter(item => !excludeList.includes(item))
})

export default ({ name, processName = `REMOVE` }) => {
  const processNameDone = `${ processName }_DONE`

  const types = {
    [processName]:      `${ name }/${ processName }`,
    [processNameDone]:  `${ name }/${ processNameDone }`,
  }

  const reducerMap = {
    [types[processNameDone]]: (state, { payload }) => _update(state, {
      data: {
        $unset: [payload.id],
      },
      order: {
        $exclude: [payload.id],
      }
    })
  }

  function* processRemove({ payload: { id } }) {
    try {
      yield put({ type: types[processNameDone],  payload: { id } })
    } catch (error) {
      console.log(error)
    }
  }

  function* saga() {
    yield takeEvery(types[processName], processRemove);
  }

  return {
    reducerMap,
    saga,
    types,
  }
}