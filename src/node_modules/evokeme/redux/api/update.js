import _update              from 'immutability-helper'

import { takeEvery }        from 'redux-saga/effects'
import { put }              from 'redux-saga/effects'


export default ({ name, processName = `UPDATE` }) => {
  const processNameDone = `${ processName }_DONE`

  const types = {
    [processName]:      `${ name }/${ processName }`,
    [processNameDone]:  `${ name }/${ processNameDone }`,
  }

  const reducerMap = {
    [types[processNameDone]]: (state, { payload }) => {
      const { id } = payload
      const doc = state.data[id]

      return _update(state, {
        data: {
          $merge: { [id]: { ...doc, ...payload } },
        },
      })
    }
  }

  function* processUpdate({ payload }) {
    try {
      yield put({ type: types[processNameDone],  payload })
    } catch (error) {
      console.log(error)
    }
  }

  function* saga() {
    yield takeEvery(types[processName], processUpdate);
  }

  return {
    reducerMap,
    saga,
    types,
  }
}