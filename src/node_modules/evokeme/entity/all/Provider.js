import React, { Component } from 'react'

import { connect }          from 'react-redux'
import { compose }          from 'redux'


import Context              from 'evokeme/space/all/Context'
import ContextEntity        from 'evokeme/entity/all/Context'


const who = [`evokeme`, `entity`, `all`, `Provider`]

class Provider extends Component {
  constructor(props) {
    super(props)

    const { entityList } = this.props

    this.state = entityList.reduce(
      (result, entity) => {
        result[entity] = this.createItem(entity)
        return result
      },
      {}
    )
  }


  createItem = (entity) => ({
    create: (payload, options = {}) => {
      const { spaceContext } = this.props
      const { ns = `default` } = this.props

      // console.log(...who, `create()`, ns, entity)

      spaceContext.item.create(
        payload,
        {
          ns,
          entity,
        }
      )
    },

    update: (payload, options) => {
      const { spaceContext } = this.props
      const { ns = `default` } = this.props
      
      spaceContext.item.update(
        payload,
        {
          ns,
          entity,
        }
      )      
    },

    remove: (payload) => {
      const { spaceContext } = this.props
      const { ns = `default` } = this.props
      
      // console.log(...who, `item`, `remove()`, payload)

      spaceContext.item.remove(
        payload,
        {
          ns,
          entity,
        }
      )      
    },
  })

  render() {
    const { entityList } = this.props
    const { entityMap } = this.props

    // console.log(...who, `render()`, `value`, this.props)

    const value = {
      ...entityList.reduce(
        (result, entity) => {

          try {
            result[entity] = {
              ...result[entity],
              ...entityMap[entity],
            }
          } catch (err) {
            result[entity] = {
              ...result[entity],
              data: {},
              order: [],
            }
          }

          return result
        },
        this.state
      ),
      time: Date.now(),
    }

    return (
      <ContextEntity.Provider value={ value }>
        { this.props.children }
      </ContextEntity.Provider>
    )
  }
}

const WithConsumer = (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Provider {...props} spaceContext={ context }>
          { props.children }
        </Provider>
      )}
    </Context.Consumer>
  )
}

const getEntityMap = (state, props, entityList) => {
  const { item } = state
  const { ns = `default` } = props

  // console.log(...who, `getEntityMap`, entityList)

  return entityList.reduce(
    (result, entity) => {
      try {
        result[entity] = {
          data: {
            ...item[ns][entity].data,
          },
          order: [
            ...item[ns][entity].order,
          ],
        }
      } catch (err) {
        result[entity] = {
          data: {},
          order: [],
        }
      }

      return result
    },
    {}
  )
}

const mapStateToProps = (state, props) => {
  const { entity = `default` } = props

  const entityList = typeof (entity) === 'string' ?
    [entity] : entity

  const entityMap = getEntityMap(state, props, entityList)

  const result = {
    entityList,
    entityMap,
  }

  // console.log(...who, `RESULT`, result.entityMap.point.order)

  return result
}

export default compose(
  connect(mapStateToProps),
)(WithConsumer)