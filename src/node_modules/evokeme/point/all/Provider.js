import React, { Component } from 'react'

import { connect }          from 'react-redux'

import uuid                 from 'uuid/v4'


import Context              from 'evokeme/point/all/Context'
import SpaceContext         from 'evokeme/space/all/Context'


const who = [`evokeme`, `point`, `all`, `Provider`]

class Provider extends Component {
  // componentDidMount = async () => {
  //   await this.createEntity()
  // }

  // createEntity = async () => {
  //   console.log(...who, `createEntity`)

  //   const {
  //     context: {
  //       entity,
  //     }
  //   } = this.props

  //   entity.create({ name: `point` })
  // }

  point = {
    create: async ({ x, y }) => {
      console.log(...who, `point`, `create()`)

      const { context } = this.props

      context.item.create({
        id: uuid(),
        x,
        y,
      })
    },

    update: ({ id, x, y }) => {
    },

    remove: ({ id }) => {
    },
  }

  render() {
    return (
      <Context.Provider value={{
        point: this.point,
      }}>
        { this.props.children }
      </Context.Provider>
    )
  }
}

const WithConsumer = (props) => {
  return (
    <SpaceContext.Consumer>
      {(context) => (
        <Provider {...props} context={ context } />
      )}
    </SpaceContext.Consumer>
  )
}

export default connect(state => state)(WithConsumer)