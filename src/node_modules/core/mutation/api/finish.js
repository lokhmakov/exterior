import _update from 'immutability-helper'

import { takeEvery } from 'redux-saga/effects'
import { put } from 'redux-saga/effects'


export default ({ name, processName = `FINISH` }) => {
  const processNameDone = `${processName}_DONE`

  const types = {
    [processName]: `${name}/${processName}`,
    [processNameDone]: `${name}/${processNameDone}`,
  }

  const reducerMap = {
    [types[processNameDone]]: (state, { payload, options }) => {
      const { name } = payload

      return _update(state, {
        $merge: {
          [name]: {
            isLoading: false,
          },
        }
      })
    }
  }

  function* process({ payload, options }) {
    try {
      yield put({
        type: types[processNameDone],
        payload,
        options
      })
    } catch (error) {
      console.log(error)
    }
  }

  function* saga() {
    yield takeEvery(types[processName], process)
  }

  return {
    reducerMap,
    saga,
    types,
  }
}
