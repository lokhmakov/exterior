import _update              from 'immutability-helper'

import { takeEvery }        from 'redux-saga/effects'
import { put }              from 'redux-saga/effects'

const reduceEntity = (
  state = {
    data: {},
    order: [],
  },
  { payload }
) => {
  const { data } = state

  return _update(state, {
    data: {
      $merge: payload.data,
    },
  })
}

const reduceSpace = (state = {}, { payload, options }) => {
  const { entity = `default` } = options

  return {
    ...state,
    [entity]: reduceEntity(state[entity], { payload, options })
  }
}

export default ({ name, processName = `UPDATE` }) => {
  const processNameDone = `${ processName }_DONE`

  const types = {
    [processName]:      `${ name }/${ processName }`,
    [processNameDone]:  `${ name }/${ processNameDone }`,
  }

  const reducerMap = {
    [types[processNameDone]]: (state, { payload, options = {} }) => {
      const { ns = `default` } = options

      console.log(`UPDATE`, payload, options)

      return {
        ...state,
        [ns]: reduceSpace(state[ns], { payload, options })
      }
    }
  }

  function* processUpdate({ payload, options }) {
    try {
      yield put({ type: types[processNameDone],  payload, options })
    } catch (error) {
      console.log(error)
    }
  }

  function* saga() {
    yield takeEvery(types[processName], processUpdate);
  }

  return {
    reducerMap,
    saga,
    types,
  }
}
