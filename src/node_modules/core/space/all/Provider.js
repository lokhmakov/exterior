import React, { Component } from 'react'

import { Provider }         from 'react-redux'


import createDebugger       from 'core/debug/api/create'

import createStore          from 'core/space/api/createStore'
import types                from 'core/space/api/types'

import Context              from 'core/space/all/Context'


const debug = createDebugger(`core:space:all:Provider`)

class SpaceProvider extends Component {
  state = {
    isReady: false,
  }

  componentDidMount = async () => {
    await this.createStore()

    this.setState({ isReady: true })
  }

  createStore = async () => {
    debug(`createStore()`)

    this.store = createStore()
  }

  create = ({ payload, options }) => {
    const action = { type: types.CREATE, payload, options }
    debug(`create()`, action)
    this.store.dispatch(action)
  }

  remove = ({ payload, options }) => {
    this.store.dispatch({ type: types.REMOVE, payload, options })
  }

  update = ({ payload, options }) => {
    this.store.dispatch({ type: types.UPDATE, payload, options })
  }

  render() {
    if (!this.state.isReady || !this.store) {
      return null
    }

    const value = {
      create: this.create,
      remove: this.remove,
      update: this.update,
    }

    return (
      <Provider store={ this.store }>
        <Context.Provider value={ value }>
          { this.props.children }
        </Context.Provider>
      </Provider>
    )
  }
}

export default SpaceProvider
