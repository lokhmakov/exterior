import PropTypes            from 'prop-types'
import React, { Component } from 'react'
import { connect }          from 'react-redux'
import { compose }          from 'redux'


import createDebugger       from 'core/debug/api/create'
import types                from 'core/query/api/types'


const debug = createDebugger(`core:query:web:Query`)

class Query extends Component {
  static propTypes = {
    name: PropTypes.string.isRequired,
    entity: PropTypes.string.isRequired,
    children: PropTypes.func.isRequired,
  }

  query = async () => {
    try {
      const { data } = this.props
      const { dispatch } = this.props
      const { entity } = this.props
      const { name } = this.props
      const { order } = this.props
      const { props } = this.props
      const { skip } = this.props
      const { query } = this.props

      if (skip && skip({ data, order })) {
        debug(`this.query()`, `SKIP`)
        return
      }

      dispatch({
        type: types.START,
        payload: {
          entity,
          name,
          query,
          props,
        }
      })

    } catch (err) {
      debug(`this.query()`, `ERROR`, err)
    }
  }

  componentDidMount = async () => {
    this.query()
  }

  componentDidUpdate = async (prevProps) => {
    debug(`componentDidUpdate()`)

    const { props } = this.props

    if (prevProps.props !== props) {
      debug(`componentDidUpdate()`, `prevProps.props !== props`)
      this.query()
    }
  }

  render() {
    debug(`render()`, this.props)

    const { queryState = {} } = this.props
    const { data } = this.props
    const { order } = this.props
    const { isLoading } = queryState
    const { hasMore } = queryState

    return this.props.children({
      isLoading,
      hasMore,
      data,
      order,
    })
  }
}

const mapStateToProps = (state, ownProps) => {
  const { name } = ownProps
  const { entity } = ownProps
  const { item = {} } = state
  const { [entity]: our } = item.default || {}

  const {
    data = {},
    order = [],
  } = our || {}

  return {
    data,
    order,
    queryState: state.query[name],
  }
}

export default compose(
  connect(mapStateToProps)
)(Query)
