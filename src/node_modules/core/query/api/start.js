import _update              from 'immutability-helper'

import { takeEvery }        from 'redux-saga/effects'
import { put }              from 'redux-saga/effects'


import queryTypes           from 'core/query/api/types'


export default ({ name, processName = `START` }) => {
  const processNameDone = `${ processName }_DONE`

  const types = {
    [processName]:      `${ name }/${ processName }`,
    [processNameDone]:  `${ name }/${ processNameDone }`,
  }

  const reducerMap = {
    [types[processNameDone]]: (state, { payload }) => {
      const { name } = payload

      return _update(state, {
        $merge: {
          [name]: {
            hasMore: true,
            isLoading: true,
          },
        }
      })
    }
  }

  function* processStart({ payload, options }) {
    try {
      const { query } = payload
      const { entity } = payload
      const { props } = payload

      yield put({
        type: types[processNameDone],
        payload
      })

      const { data, order } = yield query(props)

      yield put({
        type: `item/CREATE`,
        payload: {
          data,
          order,
        },
        options: { entity },
      })

      yield put({
        type: queryTypes.FINISH,
        payload,
        options: {
          hasMore: order.length > 0,
        }
      })
    } catch (error) {
      console.log(error)
    }
  }

  function* saga() {
    yield takeEvery(types[processName], processStart)
  }

  return {
    reducerMap,
    saga,
    types,
  }
}
