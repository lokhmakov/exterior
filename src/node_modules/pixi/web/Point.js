import * as PIXI            from 'pixi.js'

import React, { Component } from 'react'


import Context              from 'pixi/all/Context'


const who = [`pixi`, `web`, `Point`]

class Point extends Component {
  static defaultProps = {
    x: 0,
    y: 0,
  }

  constructor(props) {
    super(props)
  }

  componentDidMount() {
    const { context } = this.props
    const { action } = context
    const { stage } = action.app.get()

    this.stage = stage

    this.mount()
  }

  componentDidUpdate() {
    const { x, y } = this.props

    this.instance.x = x
    this.instance.y = y
  }

  componentWillUnmount() {
    this.unmount()
  }

  mount = (payload) => {
    this.instance = new PIXI.Graphics()

    this.update(this.props)

    this.stage.addChild(this.instance)
  }

  unmount = (payload) => {
    this.stage.removeChild(this.instance)
  }

  update = (props) => {
    const { x, y } = this.props
    const instance = this.instance

    instance.position.set(x, y)

    instance.clear()
    
    instance.beginFill(0xffffff)
    instance.lineStyle(2, 0x0000ff, 1)
    instance.drawCircle(0, 0, 8)
    instance.endFill()

    instance.interactive = true
    instance.buttonMode = true

    instance.click = this.onClick

    instance.on('pointerdown', this.onDragStart)
    instance.on('pointerup', this.onDragEnd)
    instance.on('pointerupoutside', this.onDragEnd)
    instance.on('pointermove', this.onDragMove)
  }

  onClick = (payload) => {
    const { context } = this.props

    context.debug && console.log(...who, `onClick`)

    const { onClick } = this.props
    const {
      data: {
        global: {
          x, y,
        }
      }
    } = payload

    const isDragging = Date.now() - this.timeDown > 300

    onClick && !isDragging && !this.move && onClick({ x, y })
  }

  onDragStart = (event) => {
    this.data = event.data
    this.timeDown = Date.now()
    this.alpha = 0.5
    this.dragging = true
    this.move = false
  }

  onDragEnd = () => {
    this.alpha = 1
    this.timeDown = null
    this.dragging = false
    this.data = null
    this.move = false
  }

  onDragMove = () => {
    if (this.dragging) {
      const { x, y } = this.data.getLocalPosition(this.instance.parent)
      
      this.move = true

      const { onDragMove } = this.props

      onDragMove && onDragMove({ x, y })
    }
  }  

  render() {
    return null
  }
}

export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Point {...props} context={ context } />
      )}
    </Context.Consumer>
  )
}