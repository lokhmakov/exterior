import React, { Component } from 'react'

import * as PIXI from 'pixi.js'


import Context from 'pixi/all/Context'


const who = [`pixi`, `web`, `Texture`]

class Texture extends Component {
  componentDidMount() {
    const { context } = this.props
    const { action } = context
    const { stage } = action.app.get()

    this.stage = stage

    this.mount()
  }

  componentWillUnmount() {
    this.unmount()
  }

  mount = () => {
    this.instance = new PIXI.Container()

    this.init(this.props)
    this.update(this.props)

    this.stage.addChild(this.instance)
  }

  unmount = () => {
    this.stage.removeChild(this.instance)
  }

  crop = ({ texture, width, height }) => {
    return new PIXI.Texture(
      texture,
      new PIXI.Rectangle(0, 0, width, height),
    )
  }

  init = (props) => {
    const { context } = props
    const { action } = context
    const { renderer } = action.app.get()

    const { screen } = renderer
    const { width, height } = screen

    const { x, y } = props
    const instance = this.instance

    const texture = PIXI.Texture.from('https://i.imgur.com/skQDGTk.jpg')

    this.mesh = new PIXI.Plane(texture, 2, 2)

    instance.addChild(this.mesh)

    this.instance.interactive = true

    // const mask = new PIXI.Graphics()

    // mask.clear()

    // mask.beginFill(0xffffff)
    // mask.lineStyle(2, 0x0000ff, 1)
    // mask.drawCircle(250, 250, 150)
    // mask.endFill()

    // this.instance.mask = mask

    this.instance.on('click', () => {
      //this.instance.updateTransform()

      this.mesh.vertices[0] += 150
      this.mesh.vertices[1] += 250

      this.mesh.vertices[2] += 150
      this.mesh.vertices[3] += 250

      console.log(`UVS`, this.mesh.uvs)

      console.log(`PROJECTION`, PIXI.projection)

      this.mesh.uvs[2] = 1.5
    })
  }

  update = (props) => {


    //const sprite = new PIXI.Sprite(texture)

    //const sprite = new PIXI.projection.Sprite2d()

    // sprite.scale.x -= 0.5
    // sprite.scale.y += 0.2
    //mesh.pivot.x = mesh.width * 0.4;
    //mesh.pivot.y = mesh.height * 0.3
    //mesh.vertices
  }

  onClick = (payload) => {
    const { context } = this.props
    const { onClick } = this.props

    const {
      data: {
        global: {
          x, y,
        }
      }
    } = payload

    context.debug && console.log(...who, `onClick`, { x, y })
    onClick && onClick({ x, y })
  }

  render() {
    return null
  }
}

export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Texture {...props} context={context} />
      )}
    </Context.Consumer>
  )
}