import React, { Component } from 'react'

import * as PIXI from 'pixi.js'
import * as PIXIP from 'pixi-projection'


import Context from 'pixi/all/Context'


const who = [`pixi`, `web`, `Texture`]

class Texture extends Component {
  componentDidMount() {
    const { context } = this.props
    const { action } = context
    const { stage } = action.app.get()

    this.stage = stage

    this.mount()
  }

  componentDidUpdate() {
    this.update(this.props)
  }

  componentWillUnmount() {
    this.unmount()
  }

  mount = () => {
    this.instance = new PIXI.Container()

    this.init(this.props)
    this.update(this.props)

    this.stage.addChild(this.instance)
  }

  unmount = () => {
    this.stage.removeChild(this.instance)
  }

  crop = ({ texture, width, height }) => {
    return new PIXI.Texture(
      texture,
      new PIXI.Rectangle(0, 0, width, height),
    )
  }

  init = (props) => {
    const { context } = props
    const { action } = context
    const { renderer } = action.app.get()

    const { screen } = renderer
    const { width, height } = screen

    const { x, y } = props
    const instance = this.instance

    //const texture = PIXI.Texture.from('https://i.imgur.com/skQDGTk.jpg')
    const texture = PIXI.Texture.from('https://i.imgur.com/H6GwuuM.jpg')

//    this.mesh = new PIXI.Plane(texture, 2, 2)
    var blurFilter1 = new PIXI.filters.BlurFilter()

    this.mesh = new PIXI.projection.TilingSprite2d(texture, 100000, 100000)
    //this.mesh.filters = [blurFilter1]

    blurFilter1.blur = 0.2

    instance.addChild(this.mesh)
    
    //console.log()

    this.instance.interactive = true

    // const mask = new PIXI.Graphics()

    // mask.clear()

    // mask.beginFill(0xffffff)
    // mask.lineStyle(2, 0x0000ff, 1)
    // mask.drawCircle(250, 250, 150)
    // mask.endFill()

    // this.instance.mask = mask
  }

  updateMask = (props) => {
    const { path = [] } = props
    
    const mask = new PIXI.Graphics()

    mask.clear()

    mask.beginFill(0xffffff)

    mask.moveTo(path[0][0], path[0][1])
    for (let index = 1; index < path.length; index++) {
      const [x, y] = path[index]
      mask.lineTo(x, y)
    }    
    // mask.lineStyle(2, 0x0000ff, 1)
    // mask.drawCircle(250, 250, 150)
    // mask.endFill()

    this.instance.mask = mask
  }

  updatePerspective = (props) => {
    const w = 1124
    const h = 802

    const { 
      perspectivePath: next,
    } = props

    // const path = [
    //   [0, 0],
    //   [w, 0],
    //   [w, h],
    //   [0, h],
    // ]
    const path = next

    console.log(`updatePerspective`, JSON.stringify(path))

    const quad = [
      new PIXI.Point(path[0][0], path[0][1]),
      new PIXI.Point(path[1][0], path[1][1]),
      new PIXI.Point(path[2][0], path[2][1]),
      new PIXI.Point(path[3][0], path[3][1]),
    ]

    this.mesh.tileProj.mapSprite(this.mesh, quad)
  }

  update = (props) => {
    const { scale = 1 } = props

    //const sprite = new PIXI.Sprite(texture)

    //const sprite = new PIXI.projection.Sprite2d()

    //this.mesh.scale.x = 1 * scale
    //this.mesh.scale.y = 1 * scale
    
    //mesh.pivot.x = mesh.width * 0.4;
    //mesh.pivot.y = mesh.height * 0.3
    //mesh.vertices
    this.updateMask(props)
    this.updatePerspective(props)
  }

  onClick = (payload) => {
    const { context } = this.props
    const { onClick } = this.props

    const {
      data: {
        global: {
          x, y,
        }
      }
    } = payload

    context.debug && console.log(...who, `onClick`, { x, y })
    onClick && onClick({ x, y })
  }

  render() {
    return null
  }
}

export default (props) => {
  return (
    <Context.Consumer>
      {(context) => (
        <Texture {...props} context={ context } />
      )}
    </Context.Consumer>
  )
}