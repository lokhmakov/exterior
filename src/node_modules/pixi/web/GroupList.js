import React, { Component } from 'react'


import Context from 'evokeme/entity/all/Context'
import Provider from 'evokeme/entity/all/Provider'

import Line from 'pixi/web/Line'
import Texture from 'pixi/web/Texture'


const who = [`pixi`, `web`, `LineList`]

class GroupList extends Component {
  componentDidMount = () => {
    const { context } = this.props
    const { onMount } = this.props

    onMount && onMount({ context })
  }

  componentDidUpdate = () => {

  }

  onDragMove = ({ id, x, y }) => {
    const { context } = this.props

    context && context.item.update({ id, x, y })
  }

  onClick = ({ id, x, y }) => {
    const { onClick } = this.props

    onClick && onClick({ id, x, y })
  }

  renderLine({ id }) {
    const { context } = this.props

    const { group } = context
    const { isHide } = group.data[id]

    if (isHide) return null

    const { point } = context
    const { groupToPoint } = context

    const pointIdList = []
    const perspectiveIdList = []

    let index = -1
    let firstId = null
    while (index++ < groupToPoint.order.length - 1) {
      const lineToPointId = groupToPoint.order[index]
      const { lineId, pointId } = groupToPoint.data[lineToPointId]

      if (lineId === id) {
        if (!firstId) firstId = pointId
        pointIdList.push(pointId)
      }

      if (lineId === 'perspective') {
        perspectiveIdList.push(pointId)
      }
    }
    if (firstId) pointIdList.push(firstId)

    if (!pointIdList.length) return null

    const path = pointIdList.map((id) => {
      const { x, y } = point.data[id]
      return [x, y]
    })

    const perspectivePath = perspectiveIdList.map((id) => {
      const { x, y } = point.data[id]
      return [x, y]
    })

    return [
      <Line key={ id } path={ path } />,
      <Texture
        key={`texture-${ id }`}
        scale={ this.props.scale || 1 }
        path={ path }
        perspectivePath={ perspectivePath }
      />      
    ]
  }

  render() {
    const { context } = this.props

    if (context) {
      const { group, groupToPoint } = context

      return group.order.map((id) => {
        return this.renderLine({ id })
      })
    }

    return null
  }
}

export default (props) => {
  return (
    <Provider entity={[
      'groupToPoint',
      'group',
      'point',
    ]}>
      <Context.Consumer>
        {(context) => {
          return (
            <GroupList
              {...props}
              context={context}
            />
          )
        }}
      </Context.Consumer>
    </Provider>
  )
}